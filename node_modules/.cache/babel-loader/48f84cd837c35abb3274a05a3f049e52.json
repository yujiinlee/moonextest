{"ast":null,"code":"import _classCallCheck from \"/Users/leeyoojin/portfolio/moonex/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/leeyoojin/portfolio/moonex/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/leeyoojin/portfolio/moonex/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/leeyoojin/portfolio/moonex/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/leeyoojin/portfolio/moonex/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport React from 'react';\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defaultProps = {\n  breakpointCols: undefined,\n  // optional, number or object { default: number, [key: number]: number }\n  className: undefined,\n  // required, string\n  columnClassName: undefined,\n  // optional, string\n  // Any React children. Typically an array of JSX items\n  children: undefined,\n  // Custom attributes, however it is advised against\n  // using these to prevent unintended issues and future conflicts\n  // ...any other attribute, will be added to the container\n  columnAttrs: undefined,\n  // object, added to the columns\n  // Deprecated props\n  // The column property is deprecated.\n  // It is an alias of the `columnAttrs` property\n  column: undefined\n};\nvar DEFAULT_COLUMNS = 2;\n\nvar Masonry = /*#__PURE__*/function (_React$Component) {\n  _inherits(Masonry, _React$Component);\n\n  var _super = _createSuper(Masonry);\n\n  function Masonry(props) {\n    var _this;\n\n    _classCallCheck(this, Masonry);\n\n    _this = _super.call(this, props); // Correct scope for when methods are accessed externally\n\n    _this.reCalculateColumnCount = _this.reCalculateColumnCount.bind(_assertThisInitialized(_this));\n    _this.reCalculateColumnCountDebounce = _this.reCalculateColumnCountDebounce.bind(_assertThisInitialized(_this)); // default state\n\n    var columnCount;\n\n    if (_this.props.breakpointCols && _this.props.breakpointCols.default) {\n      columnCount = _this.props.breakpointCols.default;\n    } else {\n      columnCount = parseInt(_this.props.breakpointCols) || DEFAULT_COLUMNS;\n    }\n\n    _this.state = {\n      columnCount: columnCount\n    };\n    return _this;\n  }\n\n  _createClass(Masonry, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.reCalculateColumnCount(); // window may not be available in some environments\n\n      if (window) {\n        window.addEventListener('resize', this.reCalculateColumnCountDebounce);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.reCalculateColumnCount();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (window) {\n        window.removeEventListener('resize', this.reCalculateColumnCountDebounce);\n      }\n    }\n  }, {\n    key: \"reCalculateColumnCountDebounce\",\n    value: function reCalculateColumnCountDebounce() {\n      var _this2 = this;\n\n      if (!window || !window.requestAnimationFrame) {\n        // IE10+\n        this.reCalculateColumnCount();\n        return;\n      }\n\n      if (window.cancelAnimationFrame) {\n        // IE10+\n        window.cancelAnimationFrame(this._lastRecalculateAnimationFrame);\n      }\n\n      this._lastRecalculateAnimationFrame = window.requestAnimationFrame(function () {\n        _this2.reCalculateColumnCount();\n      });\n    }\n  }, {\n    key: \"reCalculateColumnCount\",\n    value: function reCalculateColumnCount() {\n      var windowWidth = window && window.innerWidth || Infinity;\n      var breakpointColsObject = this.props.breakpointCols; // Allow passing a single number to `breakpointCols` instead of an object\n\n      if (typeof breakpointColsObject !== 'object') {\n        breakpointColsObject = {\n          default: parseInt(breakpointColsObject) || DEFAULT_COLUMNS\n        };\n      }\n\n      var matchedBreakpoint = Infinity;\n      var columns = breakpointColsObject.default || DEFAULT_COLUMNS;\n\n      for (var breakpoint in breakpointColsObject) {\n        var optBreakpoint = parseInt(breakpoint);\n        var isCurrentBreakpoint = optBreakpoint > 0 && windowWidth <= optBreakpoint;\n\n        if (isCurrentBreakpoint && optBreakpoint < matchedBreakpoint) {\n          matchedBreakpoint = optBreakpoint;\n          columns = breakpointColsObject[breakpoint];\n        }\n      }\n\n      columns = Math.max(1, parseInt(columns) || 1);\n\n      if (this.state.columnCount !== columns) {\n        this.setState({\n          columnCount: columns\n        });\n      }\n    }\n  }, {\n    key: \"itemsInColumns\",\n    value: function itemsInColumns() {\n      var currentColumnCount = this.state.columnCount;\n      var itemsInColumns = new Array(currentColumnCount); // Force children to be handled as an array\n\n      var items = React.Children.toArray(this.props.children);\n\n      for (var i = 0; i < items.length; i++) {\n        var columnIndex = i % currentColumnCount;\n\n        if (!itemsInColumns[columnIndex]) {\n          itemsInColumns[columnIndex] = [];\n        }\n\n        itemsInColumns[columnIndex].push(items[i]);\n      }\n\n      return itemsInColumns;\n    }\n  }, {\n    key: \"renderColumns\",\n    value: function renderColumns() {\n      var _this$props2 = this.props,\n          column = _this$props2.column,\n          _this$props2$columnAt = _this$props2.columnAttrs,\n          columnAttrs = _this$props2$columnAt === void 0 ? {} : _this$props2$columnAt,\n          columnClassName = _this$props2.columnClassName;\n      var childrenInColumns = this.itemsInColumns();\n      var columnWidth = \"\".concat(100 / childrenInColumns.length, \"%\");\n      var className = columnClassName;\n\n      if (className && typeof className !== 'string') {\n        this.logDeprecated('The property \"columnClassName\" requires a string'); // This is a deprecated default and will be removed soon.\n\n        if (typeof className === 'undefined') {\n          className = 'my-masonry-grid_column';\n        }\n      }\n\n      var columnAttributes = _objectSpread(_objectSpread(_objectSpread({}, column), columnAttrs), {}, {\n        style: _objectSpread(_objectSpread({}, columnAttrs.style), {}, {\n          width: columnWidth\n        }),\n        className: className\n      });\n\n      return childrenInColumns.map(function (items, i) {\n        return /*#__PURE__*/React.createElement(\"div\", _extends({}, columnAttributes, {\n          key: i\n        }), items);\n      });\n    }\n  }, {\n    key: \"logDeprecated\",\n    value: function logDeprecated(message) {\n      console.error('[Masonry]', message);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          breakpointCols = _this$props.breakpointCols,\n          columnClassName = _this$props.columnClassName,\n          columnAttrs = _this$props.columnAttrs,\n          column = _this$props.column,\n          className = _this$props.className,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"breakpointCols\", \"columnClassName\", \"columnAttrs\", \"column\", \"className\"]);\n\n      var classNameOutput = className;\n\n      if (typeof className !== 'string') {\n        this.logDeprecated('The property \"className\" requires a string'); // This is a deprecated default and will be removed soon.\n\n        if (typeof className === 'undefined') {\n          classNameOutput = 'my-masonry-grid';\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n        className: classNameOutput\n      }), this.renderColumns());\n    }\n  }]);\n\n  return Masonry;\n}(React.Component);\n\nMasonry.defaultProps = defaultProps;\nexport default Masonry;","map":null,"metadata":{},"sourceType":"module"}